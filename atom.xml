<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>高许诺个人博客</title>
  
  <subtitle>个人学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-28T05:48:04.305Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>prom-s</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue初级</title>
    <link href="http://yoursite.com/2018/02/28/vuec%E5%88%9D%E7%BA%A7/"/>
    <id>http://yoursite.com/2018/02/28/vuec初级/</id>
    <published>2018-02-28T03:49:41.000Z</published>
    <updated>2018-02-28T05:48:04.305Z</updated>
    
    <content type="html"><![CDATA[<p>第十四课实例化多个vue对象<br>声明多个vue  可以从另一个实例化对象里面改变另一个实例化对象的值</p><p>第十五课实 组件<br>component是组件  字定义名字greeting<br>dome使用方法 以标签的形式使用</p><p>第十六课实 cli脚手架搭建<br>node开发环境node -v在6.9以上 npm-v在3.0以上</p><p>全局安装 vue-cli<br>$ npm install –global vue-cli<br>如果装过了可以 vue–version检查版本<br>安装好之后 切换到自己想安装的盘里  执行<br>vue init webpack 名字</p><p>完成之后  npm run dev  会自动运行这个项目<br>第十七课实  app。vue跟组件<br>index是入口  接着执行mainjs  –app.vue  app.vue是引入的各种组件<br>app.vue就是个大模板里面有什么  页面就会显示什么<br>行为部分  按照之前的写法去写  可以有data methods</p><p>第十八课实  组件嵌套<br>app.vue是跟组件 components里面的是子组件  子组件只能在跟组件里才可以被看到<br>还可以定义全局组件在main.js里面  导入import User from ‘./components/User’<br>//全局组件注册<br>Vue.component(“user”,User);<br>在app。vue直接以标签的形式使用此组件就可以了<br>局部组件使用  先是import导入组件  然后components注册组件  使用  不能起一个和系统标签冲突的名字</p><p>第十九课实  组件css作用域<br>scoped 代表着作用域  如果样式不加scoped会都添加相同的样式  添加上scoped只有在这个作用域里才会有这个样式<br>原理：会有一个特定的data-v标识添加进dome元素上</p><p>第二十课实  组件demo<br>写好相关组件  都嵌套在app.vue跟组件里面<br>弹性盒子布局</p><p>第二十一课实  传值方法<br>1父组件向子组件传值<br>父组件定义数组  给子组件绑定一个属性  属性名字自定义</p><p>在子组件用属性的方式获取  获取的两种方式  props</p><p>第二十二课实  传值和传引用<br>传值：是字符串  number  boolean<br>传值方法和传引用方法一样  当一个删除不会影响另一个</p><p>引用：可是是数组  也可以是对象<br>传引用  改变一个地方  其他地方也会改变<br>传引用删除的话  会都删除</p><p>第二十三课实  子传父<br>现在子组件注册一个事件<br>第一个参数是父组件绑定的方法  第二个参数是传的内容</p><p>父组件接收子组件的方法 参数是$event</p><p>方法中声明事件  接收参数改变数值</p><p>第二十四课实  生命周期<br>组件在执行的过程中发生一个声明周期的阶段<br>钩子函数和methods都是方法  所以写在下面<br>beforeCreate:function(){第十四课实例化多个vue对象<br>声明多个vue  可以从另一个实例化对象里面改变另一个实例化对象的值</p><p>第十五课实 组件<br>component是组件  字定义名字greeting<br>dome使用方法 以标签的形式使用</p><p>第十六课实 cli脚手架搭建<br>node开发环境node -v在6.9以上 npm-v在3.0以上</p><h1 id="全局安装-vue-cli"><a href="#全局安装-vue-cli" class="headerlink" title="全局安装 vue-cli"></a>全局安装 vue-cli</h1><p>$ npm install –global vue-cli<br>如果装过了可以 vue–version检查版本<br>安装好之后 切换到自己想安装的盘里  执行<br>vue init webpack 名字</p><p>完成之后  npm run dev  会自动运行这个项目<br>第十七课实  app。vue跟组件<br>index是入口  接着执行mainjs  –app.vue  app.vue是引入的各种组件<br>app.vue就是个大模板里面有什么  页面就会显示什么<br>行为部分  按照之前的写法去写  可以有data methods</p><p>第十八课实  组件嵌套<br>app.vue是跟组件 components里面的是子组件  子组件只能在跟组件里才可以被看到<br>还可以定义全局组件在main.js里面  导入import User from ‘./components/User’<br>//全局组件注册<br>Vue.component(“user”,User);<br>在app。vue直接以标签的形式使用此组件就可以了<br>局部组件使用  先是import导入组件  然后components注册组件  使用  不能起一个和系统标签冲突的名字</p><p>第十九课实  组件css作用域<br>scoped 代表着作用域  如果样式不加scoped会都添加相同的样式  添加上scoped只有在这个作用域里才会有这个样式<br>原理：会有一个特定的data-v标识添加进dome元素上</p><p>第二十课实  组件demo<br>写好相关组件  都嵌套在app.vue跟组件里面<br>弹性盒子布局</p><p>第二十一课实  传值方法<br>1父组件向子组件传值<br>父组件定义数组  给子组件绑定一个属性  属性名字自定义</p><p>在子组件用属性的方式获取  获取的两种方式  props</p><p>第二十二课实  传值和传引用<br>传值：是字符串  number  boolean<br>传值方法和传引用方法一样  当一个删除不会影响另一个</p><p>引用：可是是数组  也可以是对象<br>传引用  改变一个地方  其他地方也会改变<br>传引用删除的话  会都删除</p><p>第二十三课实  子传父<br>现在子组件注册一个事件<br>第一个参数是父组件绑定的方法  第二个参数是传的内容</p><p>父组件接收子组件的方法 参数是$event</p><p>方法中声明事件  接收参数改变数值</p><p>第二十四课实  生命周期<br>组件在执行的过程中发生一个声明周期的阶段<br>钩子函数和methods都是方法  所以写在下面<br>beforeCreate:function(){<br>      alert(‘组件实例化之前执行的方法’)<br>  },<br>  created:function(){<br>      alert(‘组件实例化之前，但页面还没显示’)<br>  },<br>  beforeMount:function(){<br>      alert(‘组件挂载前，页面认为显示，但虚拟Dome已经配置’)<br>  },<br>  mounted:function(){<br>      alert(“此方法执行后，页面显示”)<br>  },<br>  beforeUpdate:function(){<br>      alert(“组件更新前，页面仍未更新，但虚拟Dom已经配置”)<br>  },<br>  Update:function(){<br>      alert(“组件更新前后，此方法执行后页面显示”)<br>  },<br>  beforeDestory:function(){<br>      alert(“组件销毁前”)<br>  }<br>  ,<br> Destory:function(){<br>      alert(“组件销毁”)<br>  }</p><pre><code>alert(&apos;组件实例化之前执行的方法&apos;)</code></pre><p>  },<br>  created:function(){<br>      alert(‘组件实例化之前，但页面还没显示’)<br>  },<br>  beforeMount:function(){<br>      alert(‘组件挂载前，页面认为显示，但虚拟Dome已经配置’)<br>  },<br>  mounted:function(){<br>      alert(“此方法执行后，页面显示”)<br>  },<br>  beforeUpdate:function(){<br>      alert(“组件更新前，页面仍未更新，但虚拟Dom已经配置”)<br>  },<br>  Update:function(){<br>      alert(“组件更新前后，此方法执行后页面显示”)<br>  },<br>  beforeDestory:function(){<br>      alert(“组件销毁前”)<br>  }<br>  ,<br> Destory:function(){<br>      alert(“组件销毁”)<br>  }</p><p>第十四课实例化多个vue对象<br>声明多个vue  可以从另一个实例化对象里面改变另一个实例化对象的值</p><p>第十五课实 组件<br>component是组件  字定义名字greeting<br>dome使用方法 以标签的形式使用</p><p>第十六课实 cli脚手架搭建<br>node开发环境node -v在6.9以上 npm-v在3.0以上</p><h1 id="全局安装-vue-cli-1"><a href="#全局安装-vue-cli-1" class="headerlink" title="全局安装 vue-cli"></a>全局安装 vue-cli</h1><p>$ npm install –global vue-cli<br>如果装过了可以 vue–version检查版本<br>安装好之后 切换到自己想安装的盘里  执行<br>vue init webpack 名字</p><p>完成之后  npm run dev  会自动运行这个项目<br>第十七课实  app。vue跟组件<br>index是入口  接着执行mainjs  –app.vue  app.vue是引入的各种组件<br>app.vue就是个大模板里面有什么  页面就会显示什么<br>行为部分  按照之前的写法去写  可以有data methods</p><p>第十八课实  组件嵌套<br>app.vue是跟组件 components里面的是子组件  子组件只能在跟组件里才可以被看到<br>还可以定义全局组件在main.js里面  导入import User from ‘./components/User’<br>//全局组件注册<br>Vue.component(“user”,User);<br>在app。vue直接以标签的形式使用此组件就可以了<br>局部组件使用  先是import导入组件  然后components注册组件  使用  不能起一个和系统标签冲突的名字</p><p>第十九课实  组件css作用域<br>scoped 代表着作用域  如果样式不加scoped会都添加相同的样式  添加上scoped只有在这个作用域里才会有这个样式<br>原理：会有一个特定的data-v标识添加进dome元素上</p><p>第二十课实  组件demo<br>写好相关组件  都嵌套在app.vue跟组件里面<br>弹性盒子布局</p><p>第二十一课实  传值方法<br>1父组件向子组件传值<br>父组件定义数组  给子组件绑定一个属性  属性名字自定义</p><p>在子组件用属性的方式获取  获取的两种方式  props</p><p>第二十二课实  传值和传引用<br>传值：是字符串  number  boolean<br>传值方法和传引用方法一样  当一个删除不会影响另一个</p><p>引用：可是是数组  也可以是对象<br>传引用  改变一个地方  其他地方也会改变<br>传引用删除的话  会都删除</p><p>第二十三课实  子传父<br>现在子组件注册一个事件<br>第一个参数是父组件绑定的方法  第二个参数是传的内容</p><p>父组件接收子组件的方法 参数是$event</p><p>方法中声明事件  接收参数改变数值</p><p>第二十四课实  生命周期<br>组件在执行的过程中发生一个声明周期的阶段<br>钩子函数和methods都是方法  所以写在下面<br>beforeCreate:function(){<br>      alert(‘组件实例化之前执行的方法’)<br>  },<br>  created:function(){<br>      alert(‘组件实例化之前，但页面还没显示’)<br>  },<br>  beforeMount:function(){<br>      alert(‘组件挂载前，页面认为显示，但虚拟Dome已经配置’)<br>  },<br>  mounted:function(){<br>      alert(“此方法执行后，页面显示”)<br>  },<br>  beforeUpdate:function(){<br>      alert(“组件更新前，页面仍未更新，但虚拟Dom已经配置”)<br>  },<br>  Update:function(){<br>      alert(“组件更新前后，此方法执行后页面显示”)<br>  },<br>  beforeDestory:function(){<br>      alert(“组件销毁前”)<br>  }<br>  ,<br> Destory:function(){<br>      alert(“组件销毁”)<br>  }</p><p>第十四课实例化多个vue对象<br>声明多个vue  可以从另一个实例化对象里面改变另一个实例化对象的值</p><p>第十五课实 组件<br>component是组件  字定义名字greeting<br>dome使用方法 以标签的形式使用</p><p>第十六课实 cli脚手架搭建<br>node开发环境node -v在6.9以上 npm-v在3.0以上</p><h1 id="全局安装-vue-cli-2"><a href="#全局安装-vue-cli-2" class="headerlink" title="全局安装 vue-cli"></a>全局安装 vue-cli</h1><p>$ npm install –global vue-cli<br>如果装过了可以 vue–version检查版本<br>安装好之后 切换到自己想安装的盘里  执行<br>vue init webpack 名字</p><p>完成之后  npm run dev  会自动运行这个项目<br>第十七课实  app。vue跟组件<br>index是入口  接着执行mainjs  –app.vue  app.vue是引入的各种组件<br>app.vue就是个大模板里面有什么  页面就会显示什么<br>行为部分  按照之前的写法去写  可以有data methods</p><p>第十八课实  组件嵌套<br>app.vue是跟组件 components里面的是子组件  子组件只能在跟组件里才可以被看到<br>还可以定义全局组件在main.js里面  导入import User from ‘./components/User’<br>//全局组件注册<br>Vue.component(“user”,User);<br>在app。vue直接以标签的形式使用此组件就可以了<br>局部组件使用  先是import导入组件  然后components注册组件  使用  不能起一个和系统标签冲突的名字</p><p>第十九课实  组件css作用域<br>scoped 代表着作用域  如果样式不加scoped会都添加相同的样式  添加上scoped只有在这个作用域里才会有这个样式<br>原理：会有一个特定的data-v标识添加进dome元素上</p><p>第二十课实  组件demo<br>写好相关组件  都嵌套在app.vue跟组件里面<br>弹性盒子布局</p><p>第二十一课实  传值方法<br>1父组件向子组件传值<br>父组件定义数组  给子组件绑定一个属性  属性名字自定义</p><p>在子组件用属性的方式获取  获取的两种方式  props</p><p>第二十二课实  传值和传引用<br>传值：是字符串  number  boolean<br>传值方法和传引用方法一样  当一个删除不会影响另一个</p><p>引用：可是是数组  也可以是对象<br>传引用  改变一个地方  其他地方也会改变<br>传引用删除的话  会都删除</p><p>第二十三课实  子传父<br>现在子组件注册一个事件<br>第一个参数是父组件绑定的方法  第二个参数是传的内容</p><p>父组件接收子组件的方法 参数是$event</p><p>方法中声明事件  接收参数改变数值</p><p>第二十四课实  生命周期<br>组件在执行的过程中发生一个声明周期的阶段<br>钩子函数和methods都是方法  所以写在下面<br>beforeCreate:function(){<br>      alert(‘组件实例化之前执行的方法’)<br>  },<br>  created:function(){<br>      alert(‘组件实例化之前，但页面还没显示’)<br>  },<br>  beforeMount:function(){<br>      alert(‘组件挂载前，页面认为显示，但虚拟Dome已经配置’)<br>  },<br>  mounted:function(){<br>      alert(“此方法执行后，页面显示”)<br>  },<br>  beforeUpdate:function(){<br>      alert(“组件更新前，页面仍未更新，但虚拟Dom已经配置”)<br>  },<br>  Update:function(){<br>      alert(“组件更新前后，此方法执行后页面显示”)<br>  },<br>  beforeDestory:function(){<br>      alert(“组件销毁前”)<br>  }<br>  ,<br> Destory:function(){<br>      alert(“组件销毁”)<br>  }</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第十四课实例化多个vue对象&lt;br&gt;声明多个vue  可以从另一个实例化对象里面改变另一个实例化对象的值&lt;/p&gt;
&lt;p&gt;第十五课实 组件&lt;br&gt;component是组件  字定义名字greeting&lt;br&gt;dome使用方法 以标签的形式使用&lt;/p&gt;
&lt;p&gt;第十六课实 cli
      
    
    </summary>
    
    
      <category term="vue初级命令" scheme="http://yoursite.com/tags/vue%E5%88%9D%E7%BA%A7%E5%91%BD%E4%BB%A4/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>vue路由</title>
    <link href="http://yoursite.com/2018/02/28/vue%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2018/02/28/vue路由/</id>
    <published>2018-02-28T03:32:46.000Z</published>
    <updated>2018-02-28T03:45:39.197Z</updated>
    
    <content type="html"><![CDATA[<p>#第二十五课实  路由  http</p><p>路由命令行安装在本项目里执行命令行 npm install vue-router –save-dev<br>在main.js中 引入router<br>import VueRouter from ‘vue-router’<br>使用方法 Vue.use（VueRouter）<br>//配置路由<br>routes不要写错<br>下面的路径在上面要先导入  否则找不到报错<br>const router = new VueRouter({<br>    routes:[<br>     {path:”/“,component:Home},<br>     {path:”/helloworld”,component:HelloWorld},<br>    ],<br>    mode:’history’<br>})<br>mode：“hostory”为了不让上面的导航栏出现井号跳转</p><p>路由配置完成之后全局组件要导入使用<br>new Vue({<br>    router,<br>  el: ‘#app’,<br>  components: { App },<br>  template: ‘<app>‘<br>})<br>完成之后在根目录app.VUE中引用router-view</app></p><p><div id="app"><br>      <ul><br>          <li><br>              <!--<a href="/">home</a>--><br>              <router-link to="/">home</router-link><br>          </li><br>          <li><br>              <!--<a href="/helloworld">hello</a>--><br>              <router-link to="/helloworld">hello</router-link><br>          </li><br>      </ul><br>      <router-view></router-view></div></p><p>  <br>vue中不能用a标签跳转 a标签会出现刷新 有专门的跳转方法   router-view  特殊属性to<br>http请求  安装 vue-resouce    命令行在本项目中安装  npm install vue -resource –save -dev<br>安装成功之后  在main.js中导入模块import VueResource from ‘vue-resource’<br>Vue.use(VueResource)使用<br>可以直接请求别的接口了  这个网站全是接口<a href="http://jsonplaceholder.typicode.com/" target="_blank" rel="noopener">http://jsonplaceholder.typicode.com/</a><br>接口传参的方式 <a href="http://blog.csdn.net/pqj222/article/details/78499469" target="_blank" rel="noopener">http://blog.csdn.net/pqj222/article/details/78499469</a><br>请求网络数据</p><p><a href="http://blog.csdn.net/u013778905/article/details/54235906" target="_blank" rel="noopener">http://blog.csdn.net/u013778905/article/details/54235906</a><br>打包webpack<br>先修改index.js里面的配置</p><p>修改完成之后  命令行运行 npm run build  打包</p><p>在dist里面  以后要通过服务器打开index.html就可以<br><a href="http://blog.csdn.net/crazywoniu/article/details/74065721" target="_blank" rel="noopener">http://blog.csdn.net/crazywoniu/article/details/74065721</a> 打包博客</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#第二十五课实  路由  http&lt;/p&gt;
&lt;p&gt;路由命令行安装在本项目里执行命令行 npm install vue-router –save-dev&lt;br&gt;在main.js中 引入router&lt;br&gt;import VueRouter from ‘vue-router’&lt;b
      
    
    </summary>
    
    
      <category term="vue路由机制" scheme="http://yoursite.com/tags/vue%E8%B7%AF%E7%94%B1%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/02/27/hello-world/"/>
    <id>http://yoursite.com/2018/02/27/hello-world/</id>
    <published>2018-02-27T06:38:12.842Z</published>
    <updated>2018-02-27T06:38:12.842Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
